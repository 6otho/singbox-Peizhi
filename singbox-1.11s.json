# 额外参数说明：
# 过滤器:
# filter
# filter.action 参数说明:·
# all 添加全部节点，使用 all 时 filter.keywords 可为空
# include 添加指定节点，必须填写 filter.keywords
# exclude 排除指定节点，必须填写 filter.keywords
# filter.action: all,
# filter.keywords: []

############ start of file ############
# 锚点区
proxy: &proxy { type: selector, interrupt_exist_connections: true, outbounds: [ 🚀 节点选择, 🎯 全球直连, ♻️ 自动选择, 🟢 手动选择, 🇭🇰 香港自动, 🇨🇳 中国自动, 🇸🇬 新加坡自动, 🇹🇼 台湾自动, 🇯🇵 日本自动, 🇰🇷 韩国自动, 🇺🇸 美国自动, 🇹🇭 泰国自动 ] }
direct: &direct { type: selector, interrupt_exist_connections: true, outbounds: [ 🎯 全球直连, 🚀 节点选择, ♻️ 自动选择, 🟢 手动选择, 🇭🇰 香港自动, 🇨🇳 中国自动, 🇸🇬 新加坡自动, 🇹🇼 台湾自动, 🇯🇵 日本自动, 🇰🇷 韩国自动, 🇺🇸 美国自动, 🇹🇭 泰国自动 ] }
############ end of delete ############

route:
  final: 🚀 节点选择
  rules:
    - { domain: [ cdn.jsdmirror.com ], outbound: 🎯 全球直连 }
    - { rule_set: geosite-category-ads-all, outbound: 🪧 广告拦截 }
    - { type: logical, mode: or, rules: [ { port: [ 3478 ] }, { network: [ tcp ], port: [ 5349 ] }, { network: [ udp ], port: [ 5350, 5351, 19302 ] }, { rule_set: [ STUN ] } ], outbound: 💧 泄漏拦截 }
    - { rule_set: [ BlockHttpDNS ], outbound: 🔎 HttpDNS }
    - { rule_set: [ geoip-google, geosite-google ], outbound: 🔍 Google }
    - { rule_set: geosite-ai, outbound: 🤖 AI }
    - { rule_set: geosite-youtube, outbound: 📹 YouTube }
    - { rule_set: geosite-tiktok, outbound: 🎵 TikTok }
    - { rule_set: [ geoip-telegram, geosite-telegram ], outbound: 📲 Telegram }
    - { rule_set: [ geoip-netflix, geosite-netflix ], outbound: 🎥 Netflix }
    - { rule_set: [ geosite-microsoft ], outbound: 🪟 Microsoft }
    - { rule_set: [ geoip-apple, geosite-apple ], outbound: 🍎 Apple }
    - { rule_set: [ geoip-cn, geoip-private, geosite-private ], outbound: 🎯 全球直连 }
  rule_set:
    # MetaCubeX 规则集
    - { tag: geosite-category-ads-all, type: remote, format: binary, url: https://cdn.jsdmirror.com/gh/MetaCubeX/meta-rules-dat@sing/geo/geosite/category-ads-all.srs, download_detour: 🎯 全球直连 }
    - { tag: geosite-ai, type: remote, format: binary, url: https://cdn.jsdmirror.com/gh/MetaCubeX/meta-rules-dat@sing/geo/geosite/category-ai-!cn.srs, download_detour: 🎯 全球直连 }
    - { tag: geosite-youtube, type: remote, format: binary, url: https://cdn.jsdmirror.com/gh/MetaCubeX/meta-rules-dat@sing/geo-lite/geosite/youtube.srs, download_detour: 🎯 全球直连 }
    - { tag: geosite-google, type: remote, format: binary, url: https://cdn.jsdmirror.com/gh/MetaCubeX/meta-rules-dat@sing/geo-lite/geosite/google.srs, download_detour: 🎯 全球直连 }
    - { tag: geosite-telegram, type: remote, format: binary, url: https://cdn.jsdmirror.com/gh/MetaCubeX/meta-rules-dat@sing/geo-lite/geosite/telegram.srs, download_detour: 🎯 全球直连 }
    - { tag: geosite-tiktok, type: remote, format: binary, url: https://cdn.jsdmirror.com/gh/MetaCubeX/meta-rules-dat@sing/geo-lite/geosite/tiktok.srs, download_detour: 🎯 全球直连 }
    - { tag: geosite-netflix, type: remote, format: binary, url: https://cdn.jsdmirror.com/gh/MetaCubeX/meta-rules-dat@sing/geo-lite/geosite/netflix.srs, download_detour: 🎯 全球直连 }
    - { tag: geosite-apple, type: remote, format: binary, url: https://cdn.jsdmirror.com/gh/MetaCubeX/meta-rules-dat@sing/geo-lite/geosite/apple.srs, download_detour: 🎯 全球直连 }
    - { tag: geosite-microsoft, type: remote, format: binary, url: https://cdn.jsdmirror.com/gh/MetaCubeX/meta-rules-dat@sing/geo-lite/geosite/microsoft.srs, download_detour: 🎯 全球直连 }
    - { tag: geosite-private, type: remote, url: https://cdn.jsdmirror.com/gh/MetaCubeX/meta-rules-dat@sing/geo/geosite/private.srs, format: binary, download_detour: 🎯 全球直连 }
    - { tag: geoip-private, type: remote, url: https://cdn.jsdmirror.com/gh/MetaCubeX/meta-rules-dat@sing/geo/geoip/private.srs, format: binary, download_detour: 🎯 全球直连 }    
    - { tag: geoip-google, type: remote, format: binary, url: https://cdn.jsdmirror.com/gh/MetaCubeX/meta-rules-dat@sing/geo-lite/geoip/google.srs, download_detour: 🎯 全球直连 }
    - { tag: geoip-telegram, type: remote, format: binary, url: https://cdn.jsdmirror.com/gh/MetaCubeX/meta-rules-dat@sing/geo-lite/geoip/telegram.srs, download_detour: 🎯 全球直连 }
    - { tag: geoip-netflix, type: remote, format: binary, url: https://cdn.jsdmirror.com/gh/MetaCubeX/meta-rules-dat@sing/geo-lite/geoip/netflix.srs, download_detour: 🎯 全球直连 }
    - { tag: geoip-apple, type: remote, format: binary, url: https://cdn.jsdmirror.com/gh/MetaCubeX/meta-rules-dat@sing/geo-lite/geoip/apple.srs, download_detour: 🎯 全球直连 }
    - { tag: geoip-cn, type: remote, format: binary, url: https://cdn.jsdmirror.com/gh/MetaCubeX/meta-rules-dat@sing/geo-lite/geoip/cn.srs, download_detour: 🎯 全球直连 }
    # senshinya 规则集
    - { tag: STUN, type: remote, url: https://cdn.jsdmirror.com/gh/senshinya/singbox_ruleset@main/rule/STUN/STUN.srs, format: binary, download_detour: 🎯 全球直连 }
    - { tag: BlockHttpDNS, type: remote, url: https://cdn.jsdmirror.com/gh/senshinya/singbox_ruleset@main/rule/BlockHttpDNS/BlockHttpDNS.srs, format: binary, download_detour: 🎯 全球直连 }
outbounds:
  - { tag: 🚀 节点选择, type: selector, interrupt_exist_connections: true, outbounds: [ ♻️ 自动选择, 🟢 手动选择, 🇭🇰 香港自动, 🇨🇳 中国自动, 🇸🇬 新加坡自动, 🇹🇼 台湾自动, 🇯🇵 日本自动, 🇰🇷 韩国自动, 🇺🇸 美国自动, 🇹🇭 泰国自动 ] }
  - { tag: 🟢 手动选择, type: selector, interrupt_exist_connections: true, outbounds: [], filter: [ { action: all, keywords: [] } ] }
  - { tag: 🎯 全球直连, type: selector, interrupt_exist_connections: true, outbounds: [ 🎯 全局直连, 🚀 节点选择, 🟢 手动选择, ♻️ 自动选择 ] }
  - { tag: 🪧 广告拦截, type: selector, interrupt_exist_connections: true, outbounds: [ 🚫 拒绝连接, 🎯 全局直连, 🚀 节点选择 ] }
  - { tag: 💧 泄漏拦截, type: selector, interrupt_exist_connections: true, outbounds: [ 🚫 拒绝连接, 🎯 全局直连, 🚀 节点选择 ] }
  - { tag: 🔎 HttpDNS, type: selector, interrupt_exist_connections: true, outbounds: [ 🚫 拒绝连接, 🎯 全局直连, 🚀 节点选择 ] }
  - { tag: ♻️ 自动选择, type: urltest, interrupt_exist_connections: true, url: https://www.gstatic.com/generate_204, interval: 3m, tolerance: 150, outbounds: [], filter: [ { action: all, keywords: [] } ] }
  - { tag: 🍎 Apple, <<: *proxy }
  - { tag: 🪟 Microsoft, <<: *proxy }
  - { tag: 🔍 Google, <<: *proxy }
  - { tag: 📹 YouTube, <<: *proxy }
  - { tag: 🤖 AI, <<: *proxy }
  - { tag: 🎵 TikTok, <<: *proxy }
  - { tag: 🎥 Netflix, <<: *proxy }
  - { tag: 📲 Telegram, <<: *proxy }
  ############ 全国家分组自动选择 ############
  - { tag: 🇭🇰 香港自动, type: urltest, interrupt_exist_connections: true, url: https://www.gstatic.com/generate_204, interval: 3m, tolerance: 150, outbounds: [], filter: [ { action: include, keywords: [ "🇭🇰|\\bHK\\b|香港|Hong Kong|HongKong" ] } ] }
  - { tag: 🇨🇳 中国自动, type: urltest, interrupt_exist_connections: true, url: https://www.gstatic.com/generate_204, interval: 3m, tolerance: 150, outbounds: [], filter: [ { action: include, keywords: [ "🇨🇳|\\bCN\\b|中国|China" ] } ] }
  - { tag: 🇸🇬 新加坡自动, type: urltest, interrupt_exist_connections: true, url: https://www.gstatic.com/generate_204, interval: 3m, tolerance: 150, outbounds: [], filter: [ { action: include, keywords: [ "🇸🇬|\\bSG\\b|新加坡|Singapore" ] } ] }
  - { tag: 🇹🇼 台湾自动, type: urltest, interrupt_exist_connections: true, url: https://www.gstatic.com/generate_204, interval: 3m, tolerance: 150, outbounds: [], filter: [ { action: include, keywords: [ "🇹🇼|\\bTW\\b|台湾|Taiwan|Tai wan" ] } ] }
  - { tag: 🇯🇵 日本自动, type: urltest, interrupt_exist_connections: true, url: https://www.gstatic.com/generate_204, interval: 3m, tolerance: 150, outbounds: [], filter: [ { action: include, keywords: [ "🇯🇵|\\bJP\\b|日本|Japan" ] } ] }
  - { tag: 🇰🇷 韩国自动, type: urltest, interrupt_exist_connections: true, url: https://www.gstatic.com/generate_204, interval: 3m, tolerance: 150, outbounds: [], filter: [ { action: include, keywords: [ "🇰🇷|\\bKR\\b|韩国|Korea, Republic of" ] } ] }
  - { tag: 🇺🇸 美国自动, type: urltest, interrupt_exist_connections: true, url: https://www.gstatic.com/generate_204, interval: 3m, tolerance: 150, outbounds: [], filter: [ { action: include, keywords: [ "🇺🇸|\\bUS\\b|美国|United States|\\bCT\\b|UnitedStates" ] } ] }
  - { tag: 🇹🇭 泰国自动, type: urltest, interrupt_exist_connections: true, url: https://www.gstatic.com/generate_204, interval: 3m, tolerance: 150, outbounds: [], filter: [ { action: include, keywords: [ "🇹🇭|\\bTH\\b|泰国|Thailand" ] } ] }
